/**这是配置文件，用于Rush的高级发布配置。
 * 更多的文件可以在Rush网站上找到：https://rushjs.io。
 */

/**
 * 一个版本策略定义的列表。 一个 "版本策略 "是一个自定义的软件包版本控制策略。
 * 策略，它影响到 "Rush change"、"Rush version "和 "Rush publish"。 该策略适用于
 * 适用于一组项目，这些项目是用rush.json的 "versionPolicyName "字段指定的。
 */
[
  // {
  //    /**
  //    *（必填）表示正在定义的版本策略的种类（"lockStepVersion "或 "individualVersion"）。
  //    *
  //    * "lockStepVersion "模式指定项目将使用 "lock-step versioning"。 这种
  //    * 策略适合于一组作为一个统一产品的可选择组件的包。
  //    * 统一的产品。 整套软件包总是一起发布，并且总是共享
  //    * 同一个NPM版本号。 当这些软件包依赖于这组中的其他软件包时，SemVer的范围通常被限制。
  //    * SemVer范围通常被限制在一个单一版本。
  //    */
  //   "definitionName": "lockStepVersion",

  //   /**
  //    *  (必填)将用于rush.json中 "versionPolicyName "字段的名称。
  //    * 这个名字也用于命令行参数，如"--版本政策"
  //    * 和"-to-version-policy"。
  //    */
  //   "policyName": "MyBigFramework",

  //   /**
  //   * （必填）当前版本。 所有属于该集合的软件包都应该有这个版本
  //    * 在当前分支中。 在提升版本时，Rush使用这个版本来决定下一个版本。
  //    * (package.json中的 "版本 "字段不被考虑。)
  //    */
  //   "version": "1.0.0",

  //   /**
  //     * （必填）发布下一个版本时将进行的碰撞类型。
  //    * 当在Git中创建一个发布分支时，这个字段应该根据发布类型来更新。
  //    * 发布的类型。
  //    *
  //    *
  //    * Valid values are: "prerelease", "release", "minor", "patch", "major"
  //    */
  //   "nextBump": "prerelease",

  //   /**
  //    * （可选）如果指定了，该集合中的所有包都共享一个共同的CHANGELOG.md文件。
  //    * 这个文件与指定的 "主 "项目一起存储，该项目必须是该组的成员。
  //    *
  //    * 如果这个字段被省略，那么一个单独的CHANGELOG.md文件将被维护给每个
  //    * 包都有一个单独的CHANGELOG.md文件。
  //    */
  //    "mainProject": "airmusic-package-a"
  // },

  // {
  //   /**
  //     * (必填)表示被定义的版本策略的种类("lockStepVersion "或 "individualVersion")。
  //    *
  //    * "individualVersion "模式指定项目将使用 "独立版本"。
  //    * 这是典型的NPM模式，每个包都有一个独立的版本号
  //    * 和 CHANGELOG.md 文件。 尽管一个CI定义负责发布这些
  //    * 包，但它们在其他方面没有任何特殊关系。 版本碰撞将
  //    * 取决于开发者如何回答每个软件包的 "急变 "问题。
  //    * 被改变。
  //    */
  //   "definitionName": "individualVersion",

  //   "policyName": "MyRandomLibraries",

  //   /**
  //   * (可选)这可以用来强制要求该集合中的所有软件包必须共享一个共同的
  //    * 主版本号，例如，因为它们来自同一个主发布分支。
  //    * 它也可以用来阻止人们不小心对SemVer进行 "重大 "修改。
  //    *不适当的。 小版本/补丁版本部分将根据
  //    * 根据 "rush change "命令，根据对每个项目所做的修改类型，独立地进行碰撞。
  //    */
  //   "lockedMajor": 3,

  //   /**
  //   * (可选)当发布由Rush管理时，默认情况下 "rush change "命令将
  //    * 为任何被拉动请求所修改的项目请求更改。这些修改条目
  //    * 将产生一个CHANGELOG.md文件。如果你手动编写你的CHANGELOG.md或以其他方式宣布更新
  //    * 如果你手动编写CHANGELOG.md或以其他方式宣布更新，请将 "exemptFromRushChange "设置为 "true"，以告诉 "rush change "忽略属于该版本策略的项目。
  //    * 属于这个版本策略的项目。
  //    */
  //   "exemptFromRushChange": false
  // }
]
